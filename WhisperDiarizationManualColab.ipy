!apt update & apt upgrade -y
!apt install libcudnn8 libcudnn8-dev -y
!pip install whisperx

import whisperx
import gc

from google.colab import userdata
import os

# Load the Hugging Face authentication token from Colab secrets
HF_TOKEN = userdata.get('HF_TOKEN')

# Set the environment variable for pyannote.audio
os.environ['HF_TOKEN'] = HF_TOKEN

device = "cuda"
audio_file = "/content/test.mp3"
batch_size = 16 # reduce if low on GPU mem
compute_type = "float16" # change to "int8" if low on GPU mem (may reduce accuracy)

# 1. Transcribe with original whisper (batched)
model = whisperx.load_model("large-v2", device, compute_type=compute_type)

# save model to local path (optional)
# model_dir = "/path/"
# model = whisperx.load_model("large-v2", device, compute_type=compute_type, download_root=model_dir)

audio = whisperx.load_audio(audio_file)
result = model.transcribe(audio, batch_size=batch_size)
print(result["segments"]) # before alignment

# delete model if low on GPU resources
# import gc; import torch; gc.collect(); torch.cuda.empty_cache(); del model

# 2. Align whisper output
model_a, metadata = whisperx.load_align_model(language_code=result["language"], device=device)
result = whisperx.align(result["segments"], model_a, metadata, audio, device, return_char_alignments=False)

print(result["segments"]) # after alignment

# delete model if low on GPU resources
# import gc; import torch; gc.collect(); torch.cuda.empty_cache(); del model_a

# 3. Assign speaker labels
diarize_model = whisperx.diarize.DiarizationPipeline(use_auth_token=HF_TOKEN, device=device)

# add min/max number of speakers if known
diarize_segments = diarize_model(audio)
# diarize_model(audio, min_speakers=min_speakers, max_speakers=max_speakers)

result = whisperx.assign_word_speakers(diarize_segments, result)
print(diarize_segments)
print(result["segments"]) # segments are now assigned speaker IDs

# Na końcu twojego kodu dodaj:

# 1. Zapisz pełny wynik do JSON
import json
with open('transcription_result.json', 'w', encoding='utf-8') as f:
    json.dump(result, f, ensure_ascii=False, indent=2, default=str)

# 2. Zapisz czytelną transkrypcję z mówcami do TXT
with open('transcription.txt', 'w', encoding='utf-8') as f:
    for segment in result["segments"]:
        speaker = segment.get('speaker', 'UNKNOWN')
        text = segment['text'].strip()
        start_time = segment['start']
        end_time = segment['end']
        f.write(f"[{start_time:.2f}s - {end_time:.2f}s] {speaker}: {text}\n")

# 3. Zapisz do CSV
import csv
with open('transcription.csv', 'w', newline='', encoding='utf-8') as f:
    writer = csv.writer(f)
    writer.writerow(['Start', 'End', 'Speaker', 'Text'])
    for segment in result["segments"]:
        writer.writerow([
            segment['start'],
            segment['end'],
            segment.get('speaker', 'UNKNOWN'),
            segment['text'].strip()
        ])

# 4. Zapisz segmenty diaryzacji
diarize_segments.to_csv('diarization_segments.csv', index=False)

print("Pliki zostały zapisane:")
print("- transcription_result.json (pełny wynik)")
print("- transcription.txt (czytelny format)")
print("- transcription.csv (format CSV)")
print("- diarization_segments.csv (segmenty diaryzacji)")

After running the cell above, you can re-run the diarization cell.